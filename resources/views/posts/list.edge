@layout('layouts/dashboard')
@set('title', '')
@section('content')

<head>
    <link rel="stylesheet" href="https://fonts.googleapis.com/css2?family=Material+Symbols+Rounded:opsz,wght,FILL,GRAD@24,400,0,0" />
</head>

<div class="block">
    @!component('components/button', {
        type: 'icon',
        icon_type: 'function',
        id: 'myBtn',
        title: 'Topo',
        classe: 'material-symbols-rounded',
        onClick: "{{topFunction()}}",
        icon: 'keyboard_double_arrow_up'
    })

    @if(page.rows.length == 0)
        <div> 
            Ainda não há nada por aqui :(
            <br>
            <a href="{{ route('web.post.create') }}">
                Que tal começar e escrever sua primeira publicação?
            </a>
        </div>    
    @endif

    <div class="container" id="scroller">
        <div class="scroller_list">
            @!component('partials/post', 
                { 
                    posts: page.rows,
                    query: search?.query
                })
        </div>

    <div class="scroller_buffer" style="position: absolute; bottom: 0; left:0; width: 100%; height: 50vh; pointer-events: none;"></div>
    </div>
</div>

<script>
    window.onscroll = function() {scrollFunction()};

    function scrollFunction() {
        let mybutton = document.getElementById("myBtn");

        if(mybutton) {
            if (document.body.scrollTop > 20 || document.documentElement.scrollTop > 20) {
                mybutton.style.display = "block";
            }
        }
    }

    // Quando clicar no botãio, scrollar até o topo
    function topFunction() {
        document.body.scrollTop = 0; // Safari
        document.documentElement.scrollTop = 0; // Chrome, Firefox, IE and Opera
    }

    const scrollerList = document.querySelector('#scroller .scroller_list')
    const scrollerBuffer = document.querySelector('#scroller .scroller_buffer')
    const states = {
        IDLE: 0,
        WORKING: 1,
        DONE: 2
    }
    
    let state = states.IDLE
    let currentPage = {{ page.currentPage }}
    const observer = new IntersectionObserver((entries) => {
        entries.forEach((entry) => {
            if (entry.isIntersecting) {
            fetchNextPage()
            }
        })
    })
    
    observer.observe(scrollerBuffer);

    async function fetchNextPage() {
        if (state === states.WORKING) return
        
        state = states.WORKING
        const nextPage = ++currentPage;

        const endpoint = `/api/posts/paginate/${nextPage}`
        const { html, page } = await fetch(`/api/posts/paginate/${nextPage}`).then(r => r.json())
        scrollerList.innerHTML += html
        state = states.IDLE
        if (nextPage >= page.meta.last_page) {
            observer.unobserve(scrollerBuffer)
            state = states.DONE
        }
    }
</script>
@endsection